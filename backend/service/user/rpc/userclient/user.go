// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: user.proto

package userclient

import (
	"context"

	"dataverse/service/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest        = user.CreateRequest
	CreateResponse       = user.CreateResponse
	DeleteRequest        = user.DeleteRequest
	DeleteResponse       = user.DeleteResponse
	ListRequest          = user.ListRequest
	ListResponse         = user.ListResponse
	LoginByEmailRequest  = user.LoginByEmailRequest
	LoginByMobileRequest = user.LoginByMobileRequest
	LoginResponse        = user.LoginResponse
	UpdateRequest        = user.UpdateRequest
	UpdateResponse       = user.UpdateResponse
	UserInfoRequest      = user.UserInfoRequest
	UserInfoResponse     = user.UserInfoResponse

	User interface {
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		LoginByEmail(ctx context.Context, in *LoginByEmailRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		LoginByMobile(ctx context.Context, in *LoginByMobileRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUser) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultUser) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultUser) LoginByEmail(ctx context.Context, in *LoginByEmailRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginByEmail(ctx, in, opts...)
}

func (m *defaultUser) LoginByMobile(ctx context.Context, in *LoginByMobileRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginByMobile(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}
