// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDataverseUserUserIdPrefix     = "cache:dataverseUser:user:id:"
	cacheDataverseUserUserEmailPrefix  = "cache:dataverseUser:user:email:"
	cacheDataverseUserUserMobilePrefix = "cache:dataverseUser:user:mobile:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id         int64        `db:"id"`          // 用户ID
		Username   string       `db:"username"`    // 用户名
		Password   string       `db:"password"`    // 密码
		Email      string       `db:"email"`       // 电子邮件
		Mobile     string       `db:"mobile"`      // 手机号
		IsAdmin    bool         `db:"is_admin"`    // 是否超级用户
		IsDeleted  bool         `db:"is_deleted"`  // 是否删除
		LastLogin  sql.NullTime `db:"last_login"`  // 最后登录时间
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	dataverseUserUserEmailKey := fmt.Sprintf("%s%v", cacheDataverseUserUserEmailPrefix, data.Email)
	dataverseUserUserIdKey := fmt.Sprintf("%s%v", cacheDataverseUserUserIdPrefix, id)
	dataverseUserUserMobileKey := fmt.Sprintf("%s%v", cacheDataverseUserUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, dataverseUserUserEmailKey, dataverseUserUserIdKey, dataverseUserUserMobileKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	dataverseUserUserIdKey := fmt.Sprintf("%s%v", cacheDataverseUserUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, dataverseUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	dataverseUserUserEmailKey := fmt.Sprintf("%s%v", cacheDataverseUserUserEmailPrefix, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, dataverseUserUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	dataverseUserUserMobileKey := fmt.Sprintf("%s%v", cacheDataverseUserUserMobilePrefix, mobile)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, dataverseUserUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	dataverseUserUserEmailKey := fmt.Sprintf("%s%v", cacheDataverseUserUserEmailPrefix, data.Email)
	dataverseUserUserIdKey := fmt.Sprintf("%s%v", cacheDataverseUserUserIdPrefix, data.Id)
	dataverseUserUserMobileKey := fmt.Sprintf("%s%v", cacheDataverseUserUserMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Email, data.Mobile, data.IsAdmin, data.IsDeleted, data.LastLogin)
	}, dataverseUserUserEmailKey, dataverseUserUserIdKey, dataverseUserUserMobileKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	dataverseUserUserEmailKey := fmt.Sprintf("%s%v", cacheDataverseUserUserEmailPrefix, data.Email)
	dataverseUserUserIdKey := fmt.Sprintf("%s%v", cacheDataverseUserUserIdPrefix, data.Id)
	dataverseUserUserMobileKey := fmt.Sprintf("%s%v", cacheDataverseUserUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Email, newData.Mobile, newData.IsAdmin, newData.IsDeleted, newData.LastLogin, newData.Id)
	}, dataverseUserUserEmailKey, dataverseUserUserIdKey, dataverseUserUserMobileKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDataverseUserUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}